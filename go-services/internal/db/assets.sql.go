// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: assets.sql

package db

import (
	"context"
)

const createAsset = `-- name: CreateAsset :one

INSERT INTO assets (
    symbol,
    name,
    asset_type
) VALUES (
    $1, $2, $3
)
RETURNING id, symbol, name, asset_type, created_at, updated_at
`

type CreateAssetParams struct {
	Symbol    string `json:"symbol"`
	Name      string `json:"name"`
	AssetType string `json:"asset_type"`
}

// queries/asset.sql
func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, createAsset, arg.Symbol, arg.Name, arg.AssetType)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.AssetType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAsset = `-- name: DeleteAsset :exec
DELETE FROM assets
WHERE id = $1
`

func (q *Queries) DeleteAsset(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAsset, id)
	return err
}

const getAsset = `-- name: GetAsset :one
SELECT id, symbol, name, asset_type, created_at, updated_at FROM assets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAsset(ctx context.Context, id int32) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAsset, id)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.AssetType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssetBySymbol = `-- name: GetAssetBySymbol :one
SELECT id, symbol, name, asset_type, created_at, updated_at FROM assets
WHERE symbol = $1 LIMIT 1
`

func (q *Queries) GetAssetBySymbol(ctx context.Context, symbol string) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAssetBySymbol, symbol)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.AssetType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAssets = `-- name: ListAssets :many
SELECT id, symbol, name, asset_type, created_at, updated_at FROM assets
ORDER BY symbol
LIMIT $1 OFFSET $2
`

type ListAssetsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAssets(ctx context.Context, arg ListAssetsParams) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, listAssets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Name,
			&i.AssetType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAsset = `-- name: UpdateAsset :one
UPDATE assets
SET 
    name = COALESCE($2, name),
    asset_type = COALESCE($3, asset_type),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, symbol, name, asset_type, created_at, updated_at
`

type UpdateAssetParams struct {
	ID        int32  `json:"id"`
	Name      string `json:"name"`
	AssetType string `json:"asset_type"`
}

func (q *Queries) UpdateAsset(ctx context.Context, arg UpdateAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, updateAsset, arg.ID, arg.Name, arg.AssetType)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.AssetType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

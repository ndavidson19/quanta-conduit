// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: orders.sql

package db

import (
	"context"
	"database/sql"
)

const cancelOrder = `-- name: CancelOrder :one
UPDATE orders
SET 
    status = 'cancelled',
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND status = 'pending'
RETURNING id, account_id, asset_id, order_type, side, quantity, price, status, created_at, updated_at
`

func (q *Queries) CancelOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, cancelOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AssetID,
		&i.OrderType,
		&i.Side,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one

INSERT INTO orders (
    account_id,
    asset_id,
    order_type,
    side,
    quantity,
    price,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, account_id, asset_id, order_type, side, quantity, price, status, created_at, updated_at
`

type CreateOrderParams struct {
	AccountID int64          `json:"account_id"`
	AssetID   int32          `json:"asset_id"`
	OrderType string         `json:"order_type"`
	Side      string         `json:"side"`
	Quantity  string         `json:"quantity"`
	Price     sql.NullString `json:"price"`
	Status    string         `json:"status"`
}

// queries/order.sql
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.AccountID,
		arg.AssetID,
		arg.OrderType,
		arg.Side,
		arg.Quantity,
		arg.Price,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AssetID,
		&i.OrderType,
		&i.Side,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, account_id, asset_id, order_type, side, quantity, price, status, created_at, updated_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AssetID,
		&i.OrderType,
		&i.Side,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrdersByAccount = `-- name: ListOrdersByAccount :many
SELECT id, account_id, asset_id, order_type, side, quantity, price, status, created_at, updated_at FROM orders
WHERE account_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersByAccountParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListOrdersByAccount(ctx context.Context, arg ListOrdersByAccountParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByAccount, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AssetID,
			&i.OrderType,
			&i.Side,
			&i.Quantity,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingOrders = `-- name: ListPendingOrders :many
SELECT id, account_id, asset_id, order_type, side, quantity, price, status, created_at, updated_at FROM orders
WHERE status = 'pending'
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListPendingOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPendingOrders(ctx context.Context, arg ListPendingOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listPendingOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AssetID,
			&i.OrderType,
			&i.Side,
			&i.Quantity,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET 
    status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, account_id, asset_id, order_type, side, quantity, price, status, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AssetID,
		&i.OrderType,
		&i.Side,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one

INSERT INTO transactions (
    id,
    debit_account_id,
    credit_account_id,
    amount,
    description
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, debit_account_id, credit_account_id, amount, description, timestamp
`

type CreateTransactionParams struct {
	ID              []byte `json:"id"`
	DebitAccountID  int64  `json:"debit_account_id"`
	CreditAccountID int64  `json:"credit_account_id"`
	Amount          int64  `json:"amount"`
	Description     string `json:"description"`
}

// queries/transaction.sql
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.DebitAccountID,
		arg.CreditAccountID,
		arg.Amount,
		arg.Description,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.DebitAccountID,
		&i.CreditAccountID,
		&i.Amount,
		&i.Description,
		&i.Timestamp,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, debit_account_id, credit_account_id, amount, description, timestamp FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id []byte) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.DebitAccountID,
		&i.CreditAccountID,
		&i.Amount,
		&i.Description,
		&i.Timestamp,
	)
	return i, err
}

const listTransactionsByAccount = `-- name: ListTransactionsByAccount :many
SELECT id, debit_account_id, credit_account_id, amount, description, timestamp FROM transactions
WHERE debit_account_id = $1 OR credit_account_id = $1
ORDER BY timestamp DESC
LIMIT $2 OFFSET $3
`

type ListTransactionsByAccountParams struct {
	DebitAccountID int64 `json:"debit_account_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListTransactionsByAccount(ctx context.Context, arg ListTransactionsByAccountParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByAccount, arg.DebitAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.DebitAccountID,
			&i.CreditAccountID,
			&i.Amount,
			&i.Description,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByTimeRange = `-- name: ListTransactionsByTimeRange :many
SELECT id, debit_account_id, credit_account_id, amount, description, timestamp FROM transactions
WHERE timestamp BETWEEN $1 AND $2
ORDER BY timestamp DESC
LIMIT $3 OFFSET $4
`

type ListTransactionsByTimeRangeParams struct {
	Timestamp   sql.NullTime `json:"timestamp"`
	Timestamp_2 sql.NullTime `json:"timestamp_2"`
	Limit       int32        `json:"limit"`
	Offset      int32        `json:"offset"`
}

func (q *Queries) ListTransactionsByTimeRange(ctx context.Context, arg ListTransactionsByTimeRangeParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByTimeRange,
		arg.Timestamp,
		arg.Timestamp_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.DebitAccountID,
			&i.CreditAccountID,
			&i.Amount,
			&i.Description,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
